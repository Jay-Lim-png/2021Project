1. 소프트웨어 설계
CHAP 1. 요구사항 확인
(1) 현행 시스템 분석
1) 플랫폼의 유형
- 싱글 사이드 플랫폼 : 제휴 관계를 통해 소비자와 공급자를 연결
- 투 사이드 플랫폼 : 두 그룹을 중개하고 모두에게 개방
- 멀티 사이드 플랫폼 : 다양한 이해관계 그룹을 연결하여 중개하는 형태
2) 플랫폼 성능 특성 분석 기법
- 사용자 인터뷰: 속도의 적정성 확인 / 인터뷰 결과서 산출
- 성능 테스트: 성능과 부하 테스트 수행/ 성능테스트, 부하테스트 결과서 산출
- 산출물 점검: 현행 플랫폼과 유사한 타사 제품의 성능자료 분석/ 벤치마킹테스트 결과서 산출
3) 플랫폼 성능 특성 측정 항목 (경사응가)
- 경과시간, 사용률, 응답시간, 가용성
4) 운영체제 분석 시 고려사항
- 신뢰도(버그), 성능(배치작업처리, 지원 메모리 크기), 기술지원, 주변기기, 구축비용(라이선스, 지원가능한 하드웨어 비용, 총소유비용 TCO)
5) 네트워크 구성요소의 사례
리피터	물리층 기능을 수행	망의 길이를 확장
허브	물리적 – 성형, 논리적 – 버스형	망의 길이 확장, 리피터보다 배선에 유리
브리지	물리층과 데이터링크층의 기능 수행	큰 네트워크를 작은 세그먼트로 분할
스위치	여러 개 포트를 가진 고성능 브리지	링크계층 네트워크를 결합해 망을 확장, MAC주소 기반으로 데이터를 빠르게 전달
라우터	물리,데이터링크,네트워크층 기능	3계층 데이터 패킷을 전달하기 위한 최적 경로를 지정하고, 이 경로를 따라 데이터 패킷을 다음 장치로 전달
게이트웨이	모든 계층의 기능 수행	프로토콜 변환을 통해 네트워크 간 통신 가능
백본망		네트워크 연결기능. LAN이나 부분망 간에 정보를 교환하는 경로 제공

6) OSI 참조모델의 계층구조
응용 계층
(Application Layer)	원격로그인, 파일액세스, 전송, 관리, 우편서비스, WWW 접근	사용자에게 서비스를 제공
표현 계층
(Presentation Layer)	변환, 암호화와 복호화, 압축 및 확장	변환, 압축, 암호화
세션 계층
(Session Layer)	세션관리, 동기화, 대화제어, 원활한 종료	대화 제어와 동기화
전송 계층
(Transport Layer)	포트 주소 지정, 분할과 재조립, 연결제어, 흐름제어, 오류제어	하나의 프로세스로부터 다른 프로레스로 메시지 전달
네트워크 계층
(Network Layer)	발신지에서 목적지까지 전달, 논리주소 지정, 라우팅	발신지 호스트로부터 최종 목적지 호스트로 패킷을 전달
데이터링크 계층
(Data Link Layer)	프레임 구성, 물리주소 지정, 흐름제어, 오류제어, 접근제어	한 노드에서 다른 노드로 프레임을 전송
물리 계층
(Physical Layer)	인터페이스와 매체의 물리적인 특성, 비트의 표현, 데이터 속도, 비트 동기화	비트를 한 노드에서 다음 노드로 전달
-	모든 유형의 시스템 간 통신을 허용하는 네트워크 시스템의 설계를 위한 계층 구조
-	특정 시스템에 대한 프로토콜 의존도를 줄이고 프로토콜 확장성을 고려해 논리구조 규정
7) DBMS의 기능
: 중복제어 / 접근 통제 / 인터페이스 제공/ 관계 표현/ 샤딩/ 파티셔닝/ 무결성 제약/ 백업
-	DBMS 분석 시 고려사항 (가성호기구)
: 가용성/ 성능/ 상호 호환성(JDBC, ODBC)/기술지원 / 구축비용
8) 비즈니스 융합
- 비즈니스 융합 유형 : why 고객가치, whom 시장유통, what 가치제안, who 공급역량, how 생산방식
- 미들웨어의 정의 : OS와 SW 사이에서 SW가 운영체제 제공 서비스를 확장하여 제공해주는 SW
- WAS : 웹 서비스의 데이터 접근, 세션관리, 트랜잭션 관리 등을 위한 라이브러리 제공
9) WAS 고려사항 (가성기구)
: 가용성 / 성능 / 기술 지원 / 구축 비용

(2) 요구분석 기법
* 요구분석 : 도출된 요구사항 간 상충을 해결하고 소프트웨어 범위를 파악해 외부환경과의 상호작용을 분석하는 과정
1) 요구분석 단계 절차
- 요구사항 분류 : 요구사항의 기능/비기능 여부, 요구사항이 미치는 영향 파악
- 개념 모델링 생성 및 분석 : 요구사항 단순화(객체모델, 데이터모델, 유즈케이스다이어그램 등)
- 요구사항 할당: 아키텍처 구성요소를 식별
- 요구사항 협상 : 요구 충돌 시 기능 합의
- 정형 분석 : Syntax-Semantics를 갖는 언어를 사용해 기호로 표현, 마지막 단계
2) 요구사항 분석 기술
청취 기술	이해관계자로부터 의견을 듣는 기술
인터뷰와 질문 기술	이해관계자를 만나 정보 수집 이야기를 나누는 기술
분석 기술	추출도니 요구사항에 대해 충돌, 중복, 누락 등의 분석을 통해 완전성과 일관성을 확보하는 기술
중재 기술	이해관계자들의 상반된 요구에 대한 중재기술
관찰 기술	사용자가 작업하는 것을 관찰하면서 사용자가 언급하지 않은 미묘한 의미를 탐지할 수 있는 기술
작성 기술	문서 작성 기술
조직 기술	수집된 방대한 정보를 일관성 있는 정보로 구조화
모델 작성 기술	수집한 자료를 바탕으로 제어의 흐름, 기능처리, 동작행위, 정보 내용 등을 이해하기 쉽도록 작성
3) 요구사항 분석에 사용하는 기능 모델링 기법
- 데이터 흐름도 (Data Flow Diagram ; DFD)
 : 데이터가 각 프로세스를 따라가면서 변환되는 모습, 자료 흐름 그래프 또는 버블차트라 부름
-	특징: 구조적 분석 기법에 이용, 제어 Control 흐름은 중요X, 시간흐름 표현X
-	구성요소
-	- 처리기(Process): 입력된 데이터를 원하는 형태로 변환하기 위한 과정, 원O으로 표시
-	- 데이터흐름(Data Flow): DFD 구성요소 간 주고받는 데이터 흐름으로 화살표로 표시
-	- 데이터저장소(Data Store): 평행선=으로 표시하며 =안에 저장소의 이름을 넣음
-	- 단말(Terminator): 프로세스 처리 과정에서 데이터가 발생하는 시작과 종료를 나타내고 사각형으로 표시, 사각형 안에는 외부 엔터티의 이름을 넣음
- 자료사전 (Data Dictionary; DD)
-	자료요소, 자료요소 집합, 자료 흐름 등의 의미와 관계, 관계값, 범위 명시(DB자료 참조용)
-	목적: 조직원에게 특정 자료 용어의 의미, 용어 정의를 조정하여 문서로 명확히 함
-	작성 원칙: 자료의 의미 기술(주석을 통해)/ 자료 구성항목 기술(의미 있는 이름을 부여하여 그룹으로 묶음)/ 동의어 규정 준수 (서로 다른 이름을 가져도 되게 둠으로써 용어통일 때보다 자료정의가 간단)/ 자료 정의의 중복 제거
-	자료 사전 기호
=	~으로 구성되어 있다는 것(be composed of)
+	자료의 연결 (and, along with)
( )	자료가 생략 가능함
{ }	자료의 반복
[ ]	자료의 선택
**	자료의 설명, 주석 Comment

3) UML (Unified Modeling Language)
: 객체지향 소프트웨어 개발과정에서 산출물을 명세화할 때 사용하는 표준화된 모델링 언어
-	개발기획과 산출물 확인, 프로그램 개발에 있어 전문가-비전문가의 대화 도구
1) UML의 특징 (가구명문)
: 가시화 언어(작성시 오류가 적고 의사소통 용이)/ 구축 언어(다양한 프로그래밍 언어로 예측 가능, 소스코드로 역변환 가능)/ 명세화 언어(완전한 모델 작성 가능)/ 문서화 언어
2) UML 구성요소
: 사물 Things , 관계 Relationship, 다이어그램 Diagram
3) UML 다이어그램 유형
①	구조적 다이어그램 (클객 컴배 복패)
: 클래스 / 객체 / 컴포넌트 / 배치 / 복합체 구조 / 패키지
②	클래스 다이어그램 (구성요소간 정적 관계 표현)
: 구성요소 – 클래스 Name, 속성 Attribute, 연산 Operation, 접근제어자
 **클래스 다이어그램 접근 제어자의 종류
-	클래스 내부 접근만 허용(private)
+	클래스 외부 접근 허용 (public)
#	동일 패키지, 파생 클래스에서 접근 가능(protected)
~	동일 패키지 클래스에서 접근 가능 (default)
③	행위적 다이어그램 (유시커 상활타)
: 유스케이스 / 시퀀스 / 커뮤니케이션 / 상태 / 활동 / 타이밍
-	유스케이스 다이어그램 (사용사례 다이어그램)
: 기능 모델링에 사용, 유스케이스 – 액터 – 시스템으로 구성됨
-	시퀀스 다이어그램 OLAM
: 객체 Object - 사각형 안 밑줄친 이름/ 생명선(Lifeline) – 객체로부터 뻗어나가는 점선/ 실행(Activation)–점선 위 직사각형, 직사각형은 실행시간 의미/ 메시지(Message) – 화살표
4) UML의 관계
①	연관관계 Association : 2개 이상의 사물이 서로 관련된 상태를 실선 화살표로 표시
                     양방향 관계의 경우 화살표 생략, 실선만
②	집합관계 Aggregation: 포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모 시작점 연결
③	포함관계 Composition: 포함하는 사물의 변화가 영향을 미치는 특별한 관계
                      속이 채워진 마름모 start로 연결
④	일반화관계 Generalization: 일반적인 개념 부모와 구체적 개념 자식을 자식->부모의 빈 화살표로 연결해 표현
⑤	의존관계 Dependency : 연관은 있으나 필요에 따라 서로 영향을 주는 단시간 연관관계
                       영향주는쪽->영향받는쪽 점선화살표로 연결
⑥	실체화관계 Realization: 사물이 할 수 있거나 해야하는 기능으로 서로를 그룹화할 수 있는 관계. 사물 -> 기능 으로 속이 빈 점선화살표 연결
5) UML 확장 모델의 스테레오 타입
- UML 스테레오타입은 <<>> (Guillemet) 기호를 사용해 표현
- 형태는 기존 UML이지만 내부의미를 다른 목적으로 사용해 기본 UML이외에 새로운 요소를 만들어내는 확장 메커니즘
<<include>>	하나의 유스케이스가 어떤 시점에 반드시 다른 유스케이스를 실행	
<<extend>>	하나의 유스케이스가 다른 유스케이스를 실행할 수도 있고 아닐 수도 있음	
<<interface>>	모든 메소드가 추상 메소드, 바로 인스턴스 만들 수 X, 추상메소드와 상수만으로 구성된 클래스	
<<entity>>	정보, 행위를 형상화하는 클래스로  기억장치에 오래 저장되어야 할 정보	
<<boundary>>	시스템과 외부 액터와의 상호작용 담당 클래스	
<<control>>	시스템이 제공하는 기능의 로직 및 제어를 담당하는 클래스	

5) Agile
: 개발과 함께 즉시 피드백을 받아서 유동적으로 개발하는 방법
[특징]
-	기능중심의 요구사항 정의
-	절차와 도구보다 개인과 소통을 중시, 고객 피드백 중시
-	작업계획을 짧게 세워 유연한 대응
-	SW가 잘 실행되는 데 가치를 둠
-	계약 협상보다 고객과의 협력 중시
[애자일 방법론 유형]
XP	의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 높이기

1-3주의 반복 개발주기
5개 가치와 12개 실천항목	[5개 가치] 용단의 피존
용기(Courage) / 단순성(Simplicity) / 의사소통(Communication) / 피드백(Feedback) / 존중(Respect)

[12가지 기본원리]
1. 짝 프로그래밍 Pair Programming
2. 공통 코드 소유 Collective Ownership
3. 지속적 통합 Continuous Integration
4. 계획 세우기 Planning Process
5. 작은 릴리즈 Small Release
6. Metaphor
7. Simple Design
8. Test Driven Develop ; TDD
9. Refactoring
10. 40-Hour Work
11. On Site Customer 고객상주
12. Coding Standard 코드 표준
린 (Lean)	도요타 린 시스템 품질기법을 SW 개발 프로세스에 적용해 낭비요소를 제거, 품질 향상	[7가지 원칙] 낭품지 확인사전
낭비제거 / 품질 내재화 / 지식 창출 / 늦은 확정 / 빠른 인도 / 사람 존중 / 전체 최적화
스크럼 (Scrum)	매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 방법론	[주요개념]
백로그 (Backlog): 제품 요구사항
Sprint : 2~4주 짧은 개발을 반복해 품질 향상
스크럼 미팅 / 스크럼마스터 / 스프린트 회고/ 번 다운차트

(3) 분석 모델 확인
1) 모델링 기법
: 실세계 현상을 쉬운 형식으로 표현
2) 모델링 절차 (요개논물)
①	요구사항 분석 : 현 데이터의 문제점과 개선점 확인
②	개념 모델링: 업무 중심의 포괄적 모델링으로 추상화 (엔티티추출, ERD 작성)
③	논리 모델링: 관계, 속성, 키 등을 도출 (식별자 확정, 정규화 수행)
④	물리 모델링: DBMS에 맞게 물리 스키마를 만들기 (데이터타입,제약조건,인덱스 정의 등)
3) 분석 자동화 도구 (CASE)
: 요구사항을 자동으로 분석하고, 분석 명세서를 기술하도록 개발된 요구사항 자동화 도구
[분석 자동화도구 분류]
Upper CASE	계획수립, 요구분석, 모델들 사이의 모순 검사, 모델 오류 검증, 자요 흐름도 작성 기능
Lower CASE	구문 중심 편집 지원, 정적/동적 테스트 지원, 시스템 명세서 생성 지원, 소스코드 생성 지원
Integrated CASE	SW 개발 주기 전체를 지원
-	분석 자동화 도구의 주요 기능
: 그래픽 지원, 소프트웨어 생명주기 전 단계 연결, 다양한 SW 개발모형 지원, 표준화된 자동화기능, 작업과정 및 데이터 공유를 통한 커뮤니케이션 증진
4) 요구사항 관리 도구
:요구사항 기반으로 프로젝트 관리, 설계 개발, 테스트 수행을 지원
 [요구사항 관리 도구 기능]
기본 기능	프로젝트 생성	프로젝트 타입 및 기본 모듈 템플릿
	요구사항 작성	요구사항별 고유 ID, 식별자 사용
	요구사항 불러오기/내보내기	.doc, html 등 다양한 확장자 제공
핵심 기능	요구사항 이력 관리	요구사항별 변경 이력 관리 기능 제공
	요구사항 베이스라인	확정을 위한 베이스라인 제공
	요구사항 추적성	요구사항 이력 추적
부가 기능	협업 환경	동시편집 기능 제공
	외부 인터페이스	형상관리도구 연동 지원 SVN, Git
	확장성	API 통한 타시스템 연동

 
CHAP2. 화면설계
(1) UI 요구사항 확인
1) UI 유형 (CG NO)
CLI
Command Line Interface	정적인 텍스트 기반 인터페이스	명령어를 텍스트로 입력하여 조작함
GUI
Graphic User Interface	그래픽 반응 기반 인터페이스	그래픽 환경을 기반으로 마우스나 전자펜을 이용
NUI
Natural User Interface	직관적 사용자 반응 기반 인터페이스	경험을 기반으로 키보드나 마우스 없이 신체 부위를 이용(터치,음성 포함)
OUI
Organic User Interface	유기적 상호작용 기반 인터페이스	입력장치가 곧 출력장치가 되고, 현실에 존재하는 모든 사물이 입출력장치로 변화할 수 있음

2) UI 설계원칙 (직유학유)
설계원칙	설명	부특성
직관성
Intuitiveness	누구나 쉽게 이해하고 쉽게 사용	쉬운 검색
쉬운 사용성
일관성
유효성
Efficiency	정확하고 완벽하게 목표가 달성될 수 있도록 제작	쉬운 오류 처리 및 복구
학습성
Learnability	초보자와 숙련자 모두가 쉽게 배우고 사용할 수 있게 제작	쉽게 학습
쉬운 접근
쉽게 기억
유연성
Flecibility	사용자의 인터랙션을 최대한 포용하고 실수를 방지할 수 있도록 제작	오류 예방
실수 포용
오류 감지
3) UI 설계 지침
: 사용자 중심, 일관성, 단순성, 결과 예측 가능, 가시성, 표준화, 접근성, 명확성, 오류 발생 해결
4) UI 표준구성 (액정 스패조)
-	전체적인 UX 원칙
-	정책 및 철학
-	UI 스타일 가이드
-	UI 패턴 모델 정의
-	UI 표준 수립을 위한 조직 구성
5) UI 표준 수립 시 고려사항
-	사용자가 불편해하지 않을 것
-	많은 업무 케이스를 포함할 것
-	다양한 사용에 대처할 수 있을 것
-	변화상황에 맞게 변경할 수 있는 관리 조직이 필요
-	표준 적용이 쉽도록 충분한 가이드와 활용수단 제공이 필요
6) UI 스타일 가이드 구성
 : UI 구동환경 정의, 레이아웃 정의, 네비게이션 정의, 기능 정의
7) 소프트웨어 개발 단계별 UI 지침
: 목표 정의 -> 프로젝트 계획 -> 요구사항 정의 -> 설계 및 구현 -> 테스트 -> 배포 및 관리
8) UI 개발을 위한 주요 기법
3C 분석	고객, 자사, 경쟁사를 비교하여 어떻게 차별화할 것인지 분석
SWOT 분석	기업의 내부/외부환경을 분석하여 SWOT을 규정하고 전략 수립
시나리오 플래닝	불확실성 상황변화를 사전에 예측하고 다양한 시나리오로 불확실을 제거해 나감
사용성 테스트	사용자가 직접 제품을 사용하면서 과제 수행 후 질문에 답함
워크숍	소집단 인원으로 아이디어를 교환하고 검토하는 연구회 및 세미나

8) 사용자 요구사항 도출
- UI 컨셉션 세부 수행 활동 (정와스)
: 정보 구조 설계 / 와이어 프레임 스케치 / 스토리보드 설계

9) UI 상세설계 – 시나리오 문서의 작성 요건 (완일이가 추수)
 : 완전성 Complete/ 일관성 Consistent/ 이해성 Underestandable/ 가독성 Readable/ 추적용이성 Traceable / 수정용이성 Modifiable

10) 스토리보드
: UI 설계를 위해 정책이나 프로세스, 와이어프레임, 기능 정의, DB연동구축 등 정보가 수록되어 디자이너와 개발자가 최종적으로 참고하는 산출문서
**UI 화면설계를 위해 (와스프) 와이어프레임/스토리보드/프로토타입 이 활용됨
** 스토리보드 작성 절차
전체 개요 작성 -> 서비스 흐름 작성 -> 스타일 확정 -> 메뉴별 화면 설계도 작성 및 상세 설명 -> 추가 관련 정보 작성

(2) UI 설계
1) UI 설계 프로세스 (문사 작컴 인디)
①	문제정의
②	사용자 모델 정의
③	작업 분석
④	컴퓨터 오브젝트 및 기능 정의
⑤	사용자 인터페이스 정의
⑥	디자인 평가
2) UI 흐름 설계 (기입유양)
①	화면에 표현해야 할 기능 작성
②	화면의 입력 요소 확인
③	UI 요구사항을 기반으로 유스케이스 설계
④	기능 및 양식 확인
3) UI 설계 도구의 유형
-	화면 설계 도구
Ex) 파워 목업, 발사믹 목업, 카카오 오븐
-	프로토타이핑 도구
Ex) UXPin, AXURE, ProtoNOW
-	UI 디자인 도구
Ex) Sketch, Adobe XD
-	UI 디자인 산출물로 작업하는 프로토타이핑 도구
Ex) Invision, Pixate, Framer
(3) 감성공학
가) 나가마치 미츠오 교수의 감성공학 접근방법
①	1류 접근 방법 : 감성 표현 어휘를 이용해 제품 이미지 조사, 디자인 요소와 연계시킴
②	2류 접근 방법 : 개인의 특성과 생활방식으로부터 개인이 갖는 이미지를 구체화
③	3류 접근 방법 : 감성 대신 공학으로 접근하여 인간의 감각을 측정, 수학적 모델을 구축

CHAP 3. 어플리케이션 설계
(1) 공통 모듈 설계
: 모듈은 크게 독립된 하나의 소프트웨어 또는 하드웨어를 지칭하는 용어
1) 모듈의 특징
-	각각 모듈은 상대적 독립성 O(서로영향X), 단독으로 컴파일 가능, 재사용 가능
-	모듈의 독립성을 높이기 위해 결합도는 약하게, 응집도는 강하게 만든다
2) 공통모듈의 개념 
: 한 프로그램에서 특정 기능을 수행하는 코드를 의미, 자체 컴파일 가능, 다른 프로그램에서 재사용 가능
3) 공통모듈의 원칙 (정명 완일추)
-	정확성 Correctness
-	명확성 Clarity
-	완전성 Completeness
-	일관성 Consistency
-	추적성 Tranceability
4) 모듈화
: SW의 수정, 재사용, 유지관리 용이성을 위해 기능 단위의 모듈로 분해 및 설계
-	루틴 : SW에서 측정 동작을 수행하는 일련의 코드로 기능을 가진 명령들의 모임
-	메인루틴: 프로그램의 주요부분, 전체 개략 동작절차를 표시하는 루틴
-	서브루틴 : 메인 루틴에 의해 필요할때마다 호출되는 루틴
5) 바람직한 모듈 설계 방안
- 결합도 낮, 응집도 높
- 적당한 모듈의 크기 유지
- 기능이 예측 가능해야 하며, 지나치게 제한적이어서는 안 됨
- 모듈 간 효과적인 제어를 위해 설계에서 계층적 자료 조직이 제시되어야 함
6) 팬인 및 팬아웃
: 모듈을 계층적으로 분석하기 위해 활용, 시스템 복잡도 측정 가능
	팬인 (연결된 부모가 몇 개?)	팬아웃 (자식이 몇 개?)
개념	어떤 모듈을 제어하는 모듈의 수	어떤 모듈에 의해 제어되는 모듈의 수
모듈 숫자 계산	모듈 자신을 기준으로 모듈에 들어오면 팬인	모듈 자신을 기준으로 모듈에서 나가면 팬아웃
고려사항	-팬인이 높을시 재사용 설계가 잘 되었지만, 단일 장애점 발생 가능
-팬인이 높을시 관리 및 테스트비용 증가	-팬아웃이 높을 경우 불필요한 모듈 호출 여부 검토 필요
-팬아웃이 높을 경우 단순화 여부 검토 필요

7) 설계모델링
: 요구사항 분석 단계에서 규명된 요구 기능들의 구체적인 구현 방법ㅂ 명시(내부기능, 구조 및 동적 행위 등을 모델링하여 표현,분석,검증)
구조 모델링과 행위 모델링으로 나뉘어짐
8) 설계 모델링 원칙
- 변경이 쉽도록 구조화되어야 함
- 하나의 함수 안에 특정 기능을 수행하는 데 필요한 자료만 사용하도록 규제
- 독립적이고 기능적인 특성을 지닌 모듈 단위로 분할 설계
- 계층적 구조를 가져야 함
9) 소프트웨어 설계 유형
- 상위 설계 : 자료구조 설계 / 아키텍쳐 설계 / 인터페이스 설계 / 프로시저 설계
- 하위 설계 : 모듈 설계
[설계유형]
설계 유형	설명
자료 구조 설계
(Data Structure Design)	요구 분석 단계에서 정보를 바탕으로 SW를 구현하는 데 필요한 자료구조로 변환
아키텍쳐 설계
(Architecture Design)	시스템의 전체 구조 기술, 예비설계-상위설계에 해당, 
SW를 구성하는 컴포넌트 간의 관계를 정의
인터페이스 설계
(Interface Design)	SW와 상호작용하는 컴퓨터 시스템, 사용자들이 어떻게 통신하는지 기술
프로시저 설계
(Procedure Design)	아키텍처 컴포넌트를 소프트웨어 컴포넌트의 프로시저 기술로 변환하는 과정
협약에 의한 설계
(Design by Contract)	클래스에 대한 여러 가정을 공유하도록 명세한 설꼐
소프트웨어 컴포넌트에 대한 인터페이스 명세를 위해 선행조건, 불변조건을 나타내는 설계방법
선행조건 Precondition: 컴포넌트의 오퍼레이션 사용 전에 참이 되어야할 조건
결과조건 Postcondition: 사용 후 만족되어야 할 조건
불면조건 Invariant: 오퍼레이션 실행 동안 항상 만족되어야 할 조건

10) 코드 설계
: 데이터 분류나 조합을 쉽게 하기 위하여 사물을 표현하는 코드를 설꼐
** 코드의 기능
: 표준화, 분류, 식별, 배열, 간소화, 연산, 암호화 오류 검출 
[코드 설계 종류]
연상 코드
(Mnemonic)	코드만 보고 대상을 연상할 수 있도록 명칭 일부를 약호(부호화) 형태로 넣어 구성된 코드 ex) 한국은 KR, 미국은 US
블록 코드
(Block Code)	공통성이 있는 것끼리 블록으로 구분하고, 각 블록 내에서 일련번호를 부여하는 코드
Ex) 전화번호에서 지역번호는 같은 지역끼리 공통으로 사용한다
순차 코드**
(Sequence Code)	일정한 기준에 따라 순서대로 일련번호를 부여한 코드
Ex) 가나다 순서대로 1번, 2번 부여
표의 숫자 코드 **
(Significant Digit Code)	대상 자료의 물리적 수치인 길이, 넓이, 용량 등을 표시한 코드
Ex) 20 – 10 – 300
10진 코드
(Decimal Code)	10진수 형태로 표현한 코드
Ex) 상품 바코드 (880….)
그룹 분류식 코드
(Group Classification Code)	대상을 기준에 따라 대분류, 중분류, 소분류로 구분하여 번호 부여
Ex) 학번은 입학년도 – 일련번호로 조합되어 있음 

